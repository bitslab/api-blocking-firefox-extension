#!/usr/bin/env python

import json
import os
import argparse
import re

parser = argparse.ArgumentParser()
parser.add_argument("--report", required=True, help="Path to the JSON file "
                    "contains information about how many reads we have for "
                    "each domain")
parser.add_argument("--source", required=True, help="Path to a directory of "
                    "log files, generated by the FF extension, that may "
                    "contain API measurements.")
parser.add_argument("--destination", required=True, help="Path to a directory "
                    "where pruned JSON reports of measurement files should be "
                    "written to")
parser.add_argument("--goal", default=5, type=int, help="Maximum number of "
                    "reports to copy for each test type")
args = parser.parse_args()


def domain_and_type_for_file(file_name):
  blocking_matches = re.search('(.*?)-[0-9]+-blocking\.json', file_name)
  if blocking_matches:
    return "blocking", blocking_matches.group(1)
  default_matches = re.search('(.*?)-[0-9]+\.json', file_name)
  if default_matches:
    return "default", default_matches.group(1)
  return None, None


def json_from_path(file_path):
  with open(file_path, 'r') as h:
    for line in h:
      if line[0:20] != 'FF-API-EXTENSION: {"':
        continue
      return line[18:]
  return None


report_h = open(args.report, "r")
report_dict = json.load(report_h)
report_h.close()
type_to_index = {
  "default": 0,
  "blocking": 1,
}    


def count_for_domain_and_type(a_domain, a_test_type):
  if a_domain not in report_dict:
    report_dict[a_domain] = [0, 0]
  return report_dict[a_domain][type_to_index[a_test_type]] 


def add_count_for_domain_and_type(a_domain, a_test_type):
  report_dict[a_domain][type_to_index[a_test_type]] += 1


for dirpath, dirnames, filenames in os.walk(args.source):
  for a_filename in filenames:

    test_type, domain = domain_and_type_for_file(a_filename)
    if not test_type:
      continue

    current_count = count_for_domain_and_type(domain, test_type) 
    if current_count >= args.goal:
      continue

    data_path = os.path.join(dirpath, a_filename)
    a_measurement_json = json_from_path(data_path)
    if not a_measurement_json:
      continue

    report_name = "{} {} {}.json".format(domain, test_type, current_count + 1)
    report_path = os.path.join(args.destination, report_name)
    dest_h = open(report_path, 'w')
    dest_h.write(a_measurement_json)
    dest_h.close()
    add_count_for_domain_and_type(domain, test_type)

end_report_h = open(args.report, "w")
json.dump(report_dict, end_report_h)

